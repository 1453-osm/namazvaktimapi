const express = require('express');
const cors = require('cors');
// const dotenv = require('dotenv');

// Routes - Åžimdilik devre dÄ±ÅŸÄ± bÄ±rakÄ±yoruz
// const prayerTimeRoutes = require('./routes/prayerTimes');
// const countryRoutes = require('./routes/countries');
// const stateRoutes = require('./routes/states');
// const cityRoutes = require('./routes/cities');

// Scripts - Åžimdilik devre dÄ±ÅŸÄ± bÄ±rakÄ±yoruz
// const { scheduleMonthlyCleanup } = require('./scripts/cleanupOldPrayerTimes');

// Config
// dotenv.config({ path: process.env.NODE_ENV === 'production' ? null : '.env', debug: process.env.DEBUG === 'true', optional: true });
const app = express();
const PORT = process.env.PORT || 8080;

// Ortam deÄŸiÅŸkenlerini logla
console.log('=== BAÅžLATILIYOR ===');
console.log('PORT:', PORT);
console.log('NODE_ENV:', process.env.NODE_ENV);
console.log('Ortam deÄŸiÅŸkenleri:', Object.keys(process.env).join(', '));

// Middlewares
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Route Middlewares - Åžimdilik devre dÄ±ÅŸÄ± bÄ±rakÄ±yoruz
// app.use('/api/prayer-times', prayerTimeRoutes);
// app.use('/api/countries', countryRoutes);
// app.use('/api/states', stateRoutes);
// app.use('/api/cities', cityRoutes);

// SaÄŸlÄ±k kontrolÃ¼
app.get('/', (req, res) => {
  console.log('Ana sayfa isteÄŸi alÄ±ndÄ±');
  res.json({ 
    status: 'success', 
    message: 'Namaz Vakti API Ã§alÄ±ÅŸÄ±yor - BasitleÅŸtirilmiÅŸ Versiyon',
    env: process.env.NODE_ENV || 'development',
    time: new Date().toISOString()
  });
});

// API test rotasÄ±
app.get('/api/test', (req, res) => {
  console.log('Test API isteÄŸi alÄ±ndÄ±');
  res.json({
    status: 'success',
    message: 'API test rotasÄ± Ã§alÄ±ÅŸÄ±yor',
    time: new Date().toISOString()
  });
});

// Hata iÅŸleyici
app.use((err, req, res, next) => {
  console.error('API HatasÄ±:', err.message);
  res.status(500).json({ error: 'Sunucu hatasÄ±', message: err.message });
});

// Sunucuyu baÅŸlat
const server = app.listen(PORT, '0.0.0.0', () => {
  console.log(`Sunucu baÅŸarÄ±yla baÅŸlatÄ±ldÄ±! ðŸš€`);
  console.log(`PORT: ${PORT}`);
  console.log(`Ortam: ${process.env.NODE_ENV || 'development'}`);
  console.log(`URL: http://0.0.0.0:${PORT}`);
  
  // ZamanlanmÄ±ÅŸ gÃ¶revleri baÅŸlat - Åžimdilik devre dÄ±ÅŸÄ± bÄ±rakÄ±yoruz
  // scheduleMonthlyCleanup();
  // console.log('AylÄ±k temizleme gÃ¶revi zamanlandÄ±');
});

// Hata yakalama
server.on('error', (error) => {
  console.error('Sunucu baÅŸlatma hatasÄ±:', error.message);
  
  if (error.code === 'EADDRINUSE') {
    console.error(`Port ${PORT} zaten kullanÄ±mda! FarklÄ± bir port seÃ§in.`);
  }
  
  // Kritik hatada uygulamayÄ± sonlandÄ±r
  process.exit(1);
});

// Sinyalleri yakala
process.on('SIGTERM', () => {
  console.log('SIGTERM sinyali alÄ±ndÄ±, sunucu kapatÄ±lÄ±yor...');
  server.close(() => {
    console.log('Sunucu kapatÄ±ldÄ±');
    process.exit(0);
  });
});

// Yakalanmayan hatalarÄ± logla
process.on('uncaughtException', (error) => {
  console.error('Yakalanmayan hata:', error.message);
  console.error(error.stack);
  // 30 saniye sÃ¼re tanÄ± ve kapat
  setTimeout(() => process.exit(1), 30000);
}); 