name: Deploy to Cloud Run

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Manuel olarak tetiklemek için

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write  # OIDC kimlik doğrulaması için gerekli

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Create app_settings
        run: |
          echo "Creating HTTP server wrapper for the script"
          mkdir -p wrapper
          # HTTP sunucusu oluştur
          cat > wrapper/server.js << 'EOL'
          const http = require('http');
          const { spawn } = require('child_process');
          
          // HTTP sunucusu oluştur
          const server = http.createServer((req, res) => {
            if (req.method === 'GET') {
              res.writeHead(200, { 'Content-Type': 'text/plain' });
              res.end('Namaz Vakti API Cities Fetcher çalışıyor. İşlemi başlatmak için POST isteği gönderin.\n');
            } else if (req.method === 'POST' && req.url === '/start') {
              // İşlemi başlat
              console.log('İlçe verilerini çekme işlemi başlatılıyor...');
              
              // Script'i ayrı bir process olarak başlat
              const process = spawn('node', ['../src/scripts/fetchCities.js'], {
                detached: true, // Ana process'ten bağımsız çalışması için
                stdio: 'inherit'  // Log çıktılarını görmek için
              });
              
              // Process ID'yi döndür
              res.writeHead(200, { 'Content-Type': 'text/plain' });
              res.end(`İlçe verilerini çekme işlemi başlatıldı. Process ID: ${process.pid}\n`);
              
              // Process hataları
              process.on('error', (err) => {
                console.error('Script çalıştırma hatası:', err);
              });
              
            } else {
              res.writeHead(404, { 'Content-Type': 'text/plain' });
              res.end('Not Found\n');
            }
          });
          
          // HTTP sunucusunu başlat
          const PORT = process.env.PORT || 8080;
          server.listen(PORT, () => {
            console.log(`Server running on port ${PORT}`);
          });
          EOL
          
          # Dockerfile'ı güncelle
          cat > Dockerfile.cloud << 'EOL'
          FROM node:18-slim
          
          WORKDIR /app
          
          COPY package*.json ./
          
          RUN npm install
          
          COPY . .
          
          EXPOSE 8080
          
          # HTTP sunucusunu çalıştır
          CMD ["node", "wrapper/server.js"]
          EOL

      - name: Deploy to Cloud Run
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: namazvaktimapi-cities-fetcher
          region: us-east1
          source: ./
          env_vars: DATABASE_URL=postgresql://namazvaktimdb_owner:npg_7iuFLUEXv6Cs@ep-proud-lab-a4dbdbma-pooler.us-east-1.aws.neon.tech/namazvaktimdb?sslmode=require
          flags: --memory=512Mi --timeout=3600 --allow-unauthenticated 