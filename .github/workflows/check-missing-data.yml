name: Eksik Verileri Kontrol Et ve Tamamla

on:
  workflow_dispatch:  # Sadece manuel olarak tetiklenebilir
    inputs:
      limit:
        description: 'Maksimum indirme sayısı'
        required: false
        default: '50'
        type: string

jobs:
  check-missing-data:
    runs-on: ubuntu-latest
    env:
      TURSO_DATABASE_URL: ${{ secrets.TURSO_DATABASE_URL }}
      TURSO_AUTH_TOKEN: ${{ secrets.TURSO_AUTH_TOKEN }}
      HTTP_PROXY: ${{ secrets.HTTP_PROXY }}
      MAX_DOWNLOADS: ${{ github.event.inputs.limit || '50' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm install
      
      - name: Test Turso Database Connection
        run: |
          echo "Turso veritabanı bağlantısı test ediliyor..."
          echo "TURSO_DATABASE_URL değişkeni: ${{ env.TURSO_DATABASE_URL != '' && 'TANIMLANMIŞ ✅' || 'TANIMLANMAMIŞ ❌' }}" 
          echo "TURSO_AUTH_TOKEN değişkeni: ${{ env.TURSO_AUTH_TOKEN != '' && 'TANIMLANMIŞ ✅' || 'TANIMLANMAMIŞ ❌' }}"
          node -e "const { testConnection } = require('./src/config/turso'); (async () => { try { await testConnection(); } catch(e) { console.error('Bağlantı hatası:', e); process.exit(1); } })();"
      
      - name: Check and fix missing data
        run: |
          echo "Eksik konum ve namaz vakitleri kontrol ediliyor..."
          echo "Maksimum indirme sayısı: $MAX_DOWNLOADS"
          # MAX_DOWNLOADS değişkenini script'e parametre olarak geçir
          node src/scripts/turso/checkAndFixMissingDataForTurso.js --limit=$MAX_DOWNLOADS
        timeout-minutes: 60  # 1 saat maksimum çalışma süresi
      
      - name: Create summary
        run: |
          echo "Eksik veri kontrolü tamamlandı." >> $GITHUB_STEP_SUMMARY
          PRAYER_TIMES_COUNT=$(node -e "const { client } = require('./src/config/turso'); async function check() { try { const result = await client.execute('SELECT COUNT(*) as count FROM prayer_times'); console.log(result.rows[0].count); } catch(e) { console.log('0'); } }; check();")
          CITIES_COUNT=$(node -e "const { client } = require('./src/config/turso'); async function check() { try { const result = await client.execute('SELECT COUNT(*) as count FROM cities'); console.log(result.rows[0].count); } catch(e) { console.log('0'); } }; check();")
          STATES_COUNT=$(node -e "const { client } = require('./src/config/turso'); async function check() { try { const result = await client.execute('SELECT COUNT(*) as count FROM states'); console.log(result.rows[0].count); } catch(e) { console.log('0'); } }; check();")
          COUNTRIES_COUNT=$(node -e "const { client } = require('./src/config/turso'); async function check() { try { const result = await client.execute('SELECT COUNT(*) as count FROM countries'); console.log(result.rows[0].count); } catch(e) { console.log('0'); } }; check();")
          
          echo "Veritabanındaki toplam namaz vakti sayısı: ${PRAYER_TIMES_COUNT}" >> $GITHUB_STEP_SUMMARY
          echo "Veritabanındaki toplam ilçe sayısı: ${CITIES_COUNT}" >> $GITHUB_STEP_SUMMARY
          echo "Veritabanındaki toplam şehir sayısı: ${STATES_COUNT}" >> $GITHUB_STEP_SUMMARY
          echo "Veritabanındaki toplam ülke sayısı: ${COUNTRIES_COUNT}" >> $GITHUB_STEP_SUMMARY 