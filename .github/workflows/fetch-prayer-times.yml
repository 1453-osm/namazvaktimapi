name: Yıllık Namaz Vakitlerini Çek

on:
  workflow_dispatch:  # Sadece manuel olarak tetiklenebilir
    inputs:
      force_update:
        description: 'Mevcut verileri zorlayarak güncelle'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
  
jobs:
  prepare-data:
    runs-on: ubuntu-latest
    env:
      TURSO_DATABASE_URL: ${{ secrets.TURSO_DATABASE_URL }}
      TURSO_AUTH_TOKEN: ${{ secrets.TURSO_AUTH_TOKEN }}
      HTTP_PROXY: ${{ secrets.HTTP_PROXY }}
    
    outputs:
      has_next_year_data: ${{ steps.check-data.outputs.has_next_year_data }}
      countries_count: ${{ steps.check-countries.outputs.countries_count }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm install
      
      - name: Test Diyanet API Connection
        run: |
          echo "Diyanet API'si bağlantısı test ediliyor..."
          echo "HTTP_PROXY değişkeni: ${{ env.HTTP_PROXY != '' && 'TANIMLANMIŞ ✅' || 'TANIMLANMAMIŞ ❌' }}" 
          node src/test-github-actions.js
        timeout-minutes: 5
        continue-on-error: true
      
      - name: Test Turso Database Connection
        run: |
          echo "Turso veritabanı bağlantısı test ediliyor..."
          echo "TURSO_DATABASE_URL değişkeni: ${{ env.TURSO_DATABASE_URL != '' && 'TANIMLANMIŞ ✅' || 'TANIMLANMAMIŞ ❌' }}" 
          echo "TURSO_AUTH_TOKEN değişkeni: ${{ env.TURSO_AUTH_TOKEN != '' && 'TANIMLANMIŞ ✅' || 'TANIMLANMAMIŞ ❌' }}"
          node -e "const { testConnection } = require('./src/config/turso'); (async () => { try { await testConnection(); } catch(e) { console.error('Bağlantı hatası:', e); process.exit(1); } })();"

      - name: Set up database schema
        run: |
          echo "Turso veritabanı şeması hazırlanıyor..."
          node src/config/setupTursoDb.js
        timeout-minutes: 10

      - name: Check location data
        id: check-countries
        run: |
          # Ülke sayısını kontrol et (daha basit yaklaşım)
          echo "Turso veritabanındaki ülke sayısı kontrol ediliyor..."
          
          # Tek satırda, process.exit() çağırarak çalıştırma
          COUNTRIES_COUNT=$(node -e "const { client } = require('./src/config/turso'); (async () => { try { const result = await client.execute('SELECT COUNT(*) as count FROM countries'); console.log(result.rows[0].count); } catch(e) { console.log('0'); } finally { process.exit(0); } })();")
          
          # Çıktıyı ayıkla - sadece sayıyı almak için
          COUNTRIES_COUNT=$(echo "$COUNTRIES_COUNT" | grep -o '[0-9]\+' | tail -1)
          
          # Değişken içeriğini göster
          echo "Bulunan ülke sayısı: $COUNTRIES_COUNT"
          
          # GitHub output için ayarla
          echo "countries_count=$COUNTRIES_COUNT" >> $GITHUB_OUTPUT
          
          # Ülke verilerini kontrol et
          if [ "$COUNTRIES_COUNT" = "0" ]; then
            echo "Ülke verileri bulunamadı, indiriliyor..."
            node src/scripts/turso/fetchCountriesForTurso.js
            
            echo "Şehir verileri indiriliyor..."
            node src/scripts/turso/fetchStatesForTurso.js
            
            echo "İlçe verileri indiriliyor..."
            node src/scripts/turso/fetchCitiesForTurso.js
          else
            echo "Lokasyon verileri zaten mevcut ($COUNTRIES_COUNT ülke)."
          fi

      - name: Check if next year data is available
        id: check-data
        run: |
          # Manuel başlatma durumunda her zaman şu anki yılın verisi çekilsin
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "Manuel başlatma, mevcut yılın verisi çekilecek."
            echo "has_next_year_data=true" >> $GITHUB_OUTPUT
          else
            # Otomatik çalışmada gelecek yıl kontrolü yapılır
            node -e "
            const diyanetApi = require('./src/utils/diyanetApi');
            const fs = require('fs');
            
            async function checkNextYearData() {
              try {
                console.log('Gelecek yıl verisi kontrol ediliyor...');
                
                // API'den desteklenen tarih aralığını al
                const dateRangeResponse = await diyanetApi.getPrayerTimeDateRange();
                
                if (!dateRangeResponse || !dateRangeResponse.success || !dateRangeResponse.data) {
                  console.log('Tarih aralığı alınamadı!');
                  process.exit(1);
                }
                
                const { startDate, endDate } = dateRangeResponse.data;
                console.log(`API desteklenen tarih aralığı: ${startDate} - ${endDate}`);
                
                // Gelecek yılın 1 Ocak tarihi
                const now = new Date();
                const nextYear = now.getFullYear() + 1;
                const nextYearStart = new Date(`${nextYear}-01-01`);
                
                // API'nin desteklediği bitiş tarihi
                const apiEndDate = new Date(endDate);
                
                // Gelecek yılın başlangıcı API tarafından destekleniyor mu?
                const nextYearStartSupported = nextYearStart <= apiEndDate;
                
                // En azından 6 ay desteklenmesini bekleyelim
                const sixMonthsNextYear = new Date(nextYear, 6, 1); // Temmuz 1
                const enoughNextYearSupported = sixMonthsNextYear <= apiEndDate;
                
                console.log(`Gelecek yıl (${nextYear}) verisi: ${nextYearStartSupported ? 'Mevcut' : 'Mevcut değil'}`);
                console.log(`Gelecek yılın en az yarısı: ${enoughNextYearSupported ? 'Destekleniyor' : 'Desteklenmiyor'}`);
                
                // GitHub Actions çıktı olarak kaydet
                fs.writeFileSync(process.env.GITHUB_OUTPUT || '', `has_next_year_data=${enoughNextYearSupported ? 'true' : 'false'}`);
                
                return enoughNextYearSupported;
              } catch (error) {
                console.error('Hata:', error);
                process.exit(1);
              }
            }
            
            checkNextYearData();
            "
          fi
        continue-on-error: true

  fetch-prayer-times:
    needs: prepare-data
    if: ${{ needs.prepare-data.outputs.has_next_year_data == 'true' || github.event.inputs.force_update == 'true' }}
    runs-on: ubuntu-latest
    env:
      TURSO_DATABASE_URL: ${{ secrets.TURSO_DATABASE_URL }}
      TURSO_AUTH_TOKEN: ${{ secrets.TURSO_AUTH_TOKEN }}
      HTTP_PROXY: ${{ secrets.HTTP_PROXY }}
    
    strategy:
      matrix:
        chunk: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
      fail-fast: false  # Bir iş başarısız olsa bile diğerleri devam etsin
      max-parallel: 10  # Eşzamanlı olarak çalışacak maksimum iş sayısı
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm install
      
      - name: Fetch prayer times data (chunk ${{ matrix.chunk }})
        env:
          CHUNK_ID: ${{ matrix.chunk }}
        run: |
          echo "Namaz vakitlerini çekme işlemi (parça ${{ matrix.chunk }}/10) başlatılıyor..."
          echo "TURSO_DATABASE_URL: ${{ env.TURSO_DATABASE_URL != '' && 'TANIMLANMIŞ' || 'TANIMLANMAMIŞ' }}"
          echo "TURSO_AUTH_TOKEN: ${{ env.TURSO_AUTH_TOKEN != '' && 'TANIMLANMIŞ' || 'TANIMLANMAMIŞ' }}"
          echo "HTTP_PROXY: ${{ env.HTTP_PROXY != '' && 'TANIMLANMIŞ' || 'TANIMLANMAMIŞ' }}"
          echo "CHUNK_ID: ${{ matrix.chunk }}"
          
          # Paralel çalışma için gerekli parametreleri geçirerek script'i çalıştır
          # TODO: Turso için fetchAllPrayerTimesForTurso.js scripti oluşturulmalı
          NODE_OPTIONS="--max-old-space-size=4096" node src/scripts/turso/fetchAllPrayerTimesForTurso.js --chunk=${{ matrix.chunk }} --total-chunks=10
        timeout-minutes: 120  # Her bir parça için 2 saat timeout (daha kısa sürecek)

  finalize:
    needs: [prepare-data, fetch-prayer-times]
    if: ${{ always() && (needs.prepare-data.outputs.has_next_year_data == 'true' || github.event.inputs.force_update == 'true') }}
    runs-on: ubuntu-latest
    env:
      TURSO_DATABASE_URL: ${{ secrets.TURSO_DATABASE_URL }}
      TURSO_AUTH_TOKEN: ${{ secrets.TURSO_AUTH_TOKEN }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm install
      
      - name: Test prayer times data
        run: |
          echo "Turso veritabanındaki namaz vakitleri sayısı kontrol ediliyor..."
          PRAYER_TIMES_COUNT=$(node -e "const { client } = require('./src/config/turso'); async function check() { try { const result = await client.execute('SELECT COUNT(*) as count FROM prayer_times'); console.log(result.rows[0].count); } catch(e) { console.log('Hata: ' + e.message); } }; check();")
          echo "Namaz vakitleri sayısı: ${PRAYER_TIMES_COUNT}"
      
      - name: Create summary
        run: |
          echo "Yıllık namaz vakitleri işlemi tamamlandı." >> $GITHUB_STEP_SUMMARY
          PRAYER_TIMES_COUNT=$(node -e "const { client } = require('./src/config/turso'); async function check() { try { const result = await client.execute('SELECT COUNT(*) as count FROM prayer_times'); console.log(result.rows[0].count); } catch(e) { console.log('0'); } }; check();")
          echo "Veritabanındaki toplam namaz vakti sayısı: ${PRAYER_TIMES_COUNT}" >> $GITHUB_STEP_SUMMARY
          echo "Paralel veri çekme işlemi başarıyla tamamlandı (10 paralel görev)." >> $GITHUB_STEP_SUMMARY

  handle-data-not-available:
    needs: prepare-data
    if: ${{ needs.prepare-data.outputs.has_next_year_data == 'false' && github.event.inputs.force_update == 'false' }}
    runs-on: ubuntu-latest
    
    steps:
      - name: Handle data not available
        run: |
          echo "Gelecek yıl verisi henüz Diyanet API'sinde mevcut değil."
          echo "Veri çekme işlemi gerçekleştirilmedi."
          echo "Zorlamak için 'force_update' seçeneğini true olarak ayarlayın." 
          
  check-missing-data:
    needs: [finalize]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    env:
      TURSO_DATABASE_URL: ${{ secrets.TURSO_DATABASE_URL }}
      TURSO_AUTH_TOKEN: ${{ secrets.TURSO_AUTH_TOKEN }}
      HTTP_PROXY: ${{ secrets.HTTP_PROXY }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm install
      
      - name: Check and fix missing data
        run: |
          echo "Eksik veri kontrolü Turso veritabanında yapılacak..."
          # TODO: Turso için checkAndFixMissingDataForTurso.js scripti oluşturulmalı
          node src/scripts/turso/checkAndFixMissingDataForTurso.js
        timeout-minutes: 30 