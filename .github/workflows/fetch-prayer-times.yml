name: Yıllık Namaz Vakitlerini Çek

on:
  workflow_dispatch:  # Sadece manuel olarak tetiklenebilir
    inputs:
      force_update:
        description: 'Mevcut verileri zorlayarak güncelle'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
  
jobs:
  fetch-prayer-times:
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Test Database Connection
        run: |
          echo "Veritabanı bağlantısı test ediliyor..."
          echo "DATABASE_URL değişkeni: ${{ env.DATABASE_URL != '' && 'TANIMLANMIŞ ✅' || 'TANIMLANMAMIŞ ❌' }}" 
          node src/scripts/testDbConnection.js

      - name: Set up database schema
        run: |
          echo "Veritabanı şeması hazırlanıyor..."
          node src/config/setupDb.js
        timeout-minutes: 10

      - name: Check if next year data is available
        id: check-data
        run: |
          node -e "
          const diyanetApi = require('./src/utils/diyanetApi');
          const fs = require('fs');
          
          async function checkNextYearData() {
            try {
              console.log('Gelecek yıl verisi kontrol ediliyor...');
              
              // API'den desteklenen tarih aralığını al
              const dateRangeResponse = await diyanetApi.getPrayerTimeDateRange();
              
              if (!dateRangeResponse || !dateRangeResponse.isSuccess || !dateRangeResponse.data) {
                console.log('Tarih aralığı alınamadı!');
                process.exit(1);
              }
              
              const { startDate, endDate } = dateRangeResponse.data;
              console.log(`API desteklenen tarih aralığı: ${startDate} - ${endDate}`);
              
              // Gelecek yılın 1 Ocak tarihi
              const now = new Date();
              const nextYear = now.getFullYear() + 1;
              const nextYearStart = new Date(`${nextYear}-01-01`);
              
              // API'nin desteklediği bitiş tarihi
              const apiEndDate = new Date(endDate);
              
              // Gelecek yılın başlangıcı API tarafından destekleniyor mu?
              const nextYearStartSupported = nextYearStart <= apiEndDate;
              
              // En azından 6 ay desteklenmesini bekleyelim
              const sixMonthsNextYear = new Date(nextYear, 6, 1); // Temmuz 1
              const enoughNextYearSupported = sixMonthsNextYear <= apiEndDate;
              
              console.log(`Gelecek yıl (${nextYear}) verisi: ${nextYearStartSupported ? 'Mevcut' : 'Mevcut değil'}`);
              console.log(`Gelecek yılın en az yarısı: ${enoughNextYearSupported ? 'Destekleniyor' : 'Desteklenmiyor'}`);
              
              // GitHub Actions çıktı olarak kaydet
              fs.writeFileSync(process.env.GITHUB_OUTPUT || '', `has_next_year_data=${enoughNextYearSupported ? 'true' : 'false'}`);
              
              return enoughNextYearSupported;
            } catch (error) {
              console.error('Hata:', error);
              process.exit(1);
            }
          }
          
          checkNextYearData();
          "
        continue-on-error: true
      
      - name: Fetch yearly prayer times data
        if: ${{ steps.check-data.outputs.has_next_year_data == 'true' || github.event.inputs.force_update == 'true' }}
        run: |
          echo "Namaz vakitlerini çekme işlemi başlatılıyor..."
          echo "DATABASE_URL: ${{ env.DATABASE_URL != '' && 'TANIMLANMIŞ' || 'TANIMLANMAMIŞ' }}"
          echo "Komut: node src/scripts/fetchPrayerTimes.js"
          
          # Lokasyon verilerini kontrol et ve gerekirse indir
          echo "Lokasyon verileri kontrol ediliyor..."
          COUNTRIES_COUNT=$(node -e "const db = require('./src/config/db'); async function check() { try { const result = await db.query('SELECT COUNT(*) FROM countries'); console.log(result.rows[0].count); } catch(e) { console.log('0'); } finally { db.pool.end(); } }; check();")
          
          if [ "$COUNTRIES_COUNT" -eq "0" ]; then
            echo "Ülke verileri bulunamadı, indiriliyor..."
            node src/scripts/fetchCountries.js
            
            echo "Şehir verileri indiriliyor..."
            node src/scripts/fetchStates.js
            
            echo "İlçe verileri indiriliyor..."
            node src/scripts/fetchCities.js
          else
            echo "Lokasyon verileri zaten mevcut (${COUNTRIES_COUNT} ülke)."
          fi
          
          # Namaz vakitlerini indir
          NODE_OPTIONS="--max-old-space-size=4096" node src/scripts/fetchPrayerTimes.js
        timeout-minutes: 240  # 4 saat timeout (uzun bir işlem olabilir)
      
      - name: Test prayer times data
        if: ${{ steps.check-data.outputs.has_next_year_data == 'true' || github.event.inputs.force_update == 'true' }}
        run: |
          echo "Veritabanındaki namaz vakitleri sayısı kontrol ediliyor..."
          PRAYER_TIMES_COUNT=$(node -e "const db = require('./src/config/db'); async function check() { try { const result = await db.query('SELECT COUNT(*) FROM prayer_times'); console.log(result.rows[0].count); } catch(e) { console.log('Hata: ' + e.message); } finally { db.pool.end(); } }; check();")
          echo "Namaz vakitleri sayısı: ${PRAYER_TIMES_COUNT}"
      
      - name: Handle data not available
        if: ${{ steps.check-data.outputs.has_next_year_data == 'false' && github.event.inputs.force_update == 'false' }}
        run: |
          echo "Gelecek yıl verisi henüz Diyanet API'sinde mevcut değil."
          echo "Veri çekme işlemi gerçekleştirilmedi."
          echo "Zorlamak için 'force_update' seçeneğini true olarak ayarlayın."
      
      - name: Create summary
        if: ${{ steps.check-data.outputs.has_next_year_data == 'true' || github.event.inputs.force_update == 'true' }}
        run: |
          echo "Yıllık namaz vakitleri işlemi tamamlandı." >> $GITHUB_STEP_SUMMARY
          PRAYER_TIMES_COUNT=$(node -e "const db = require('./src/config/db'); async function check() { try { const result = await db.query('SELECT COUNT(*) FROM prayer_times'); console.log(result.rows[0].count); } catch(e) { console.log('0'); } finally { db.pool.end(); } }; check();")
          echo "Veritabanındaki toplam namaz vakti sayısı: ${PRAYER_TIMES_COUNT}" >> $GITHUB_STEP_SUMMARY 